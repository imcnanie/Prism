
prismFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d0  00800100  00000634  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008006d0  008006d0  00000c98  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001740  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c04  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000261  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048e  00000000  00000000  00002665  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ad  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000703  00000000  00000000  00002e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	16 e0       	ldi	r17, 0x06	; 6
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e3       	ldi	r30, 0x34	; 52
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 3d       	cpi	r26, 0xD0	; 208
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	16 e0       	ldi	r17, 0x06	; 6
  d0:	a0 ed       	ldi	r26, 0xD0	; 208
  d2:	b6 e0       	ldi	r27, 0x06	; 6
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 3d       	cpi	r26, 0xD2	; 210
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  e2:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <LCDClear>:
	for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
	LCDData(my_array[index]);
}

//Clears the LCD by writing zeros to the entire screen
void LCDClear(void) {
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	c8 ef       	ldi	r28, 0xF8	; 248
  f0:	d1 e0       	ldi	r29, 0x01	; 1
	for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
	LCDData(0x00);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
  fa:	21 97       	sbiw	r28, 0x01	; 1
	LCDData(my_array[index]);
}

//Clears the LCD by writing zeros to the entire screen
void LCDClear(void) {
	for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
  fc:	d1 f7       	brne	.-12     	; 0xf2 <LCDClear+0x8>
	LCDData(0x00);
	
	gotoXY(0, 0); //After we clear the display, return to the home position
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <gotoXY>:

void gotoXY(int x, int y) {
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	eb 01       	movw	r28, r22
	LCDCommand(0x80 | x);  // Column.
 11a:	06 ec       	ldi	r16, 0xC6	; 198
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	f8 01       	movw	r30, r16
 122:	09 95       	icall
	LCDCommand(0x40 | y);  // Row.  ?
 124:	ce 01       	movw	r24, r28
 126:	80 64       	ori	r24, 0x40	; 64
 128:	f8 01       	movw	r30, r16
 12a:	09 95       	icall
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <LCDInit>:

//This sends the magical commands to the PCD8544
void LCDInit(void) {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29

	//Configure control pins
	set_bit(DDRB,PIN_SCE);
 13a:	20 9a       	sbi	0x04, 0	; 4
	set_bit(DDRB,PIN_RESET);
 13c:	24 9a       	sbi	0x04, 4	; 4
	set_bit(DDRB,PIN_DC);
 13e:	26 9a       	sbi	0x04, 6	; 4
	set_bit(DDRB,PIN_SDIN);
 140:	22 9a       	sbi	0x04, 2	; 4
	set_bit(DDRB,PIN_SCLK);
 142:	21 9a       	sbi	0x04, 1	; 4
	
	set_bit(DDRF,5);
 144:	85 9a       	sbi	0x10, 5	; 16
	
	//PRRO write to 0
	PRR0 = (0<<PRSPI);
 146:	10 92 64 00 	sts	0x0064, r1
	/* Set MOSI and SCK output, all others input */
	//DDRB = (1<<DDB2)|(1<<DDB1)|(1<<DDB5)|(1<<DDB0);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 14a:	81 e5       	ldi	r24, 0x51	; 81
 14c:	8c bd       	out	0x2c, r24	; 44

	//Reset the LCD to a known state
	clear_bit(PORTB, PIN_RESET);
 14e:	2c 98       	cbi	0x05, 4	; 5
	set_bit(PORTB, PIN_RESET);
 150:	2c 9a       	sbi	0x05, 4	; 5

	LCDCommand(0x21); //Tell LCD that extended commands follow
 152:	c6 ec       	ldi	r28, 0xC6	; 198
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	81 e2       	ldi	r24, 0x21	; 33
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fe 01       	movw	r30, r28
 15c:	09 95       	icall
	LCDCommand(0xB0); //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 15e:	80 eb       	ldi	r24, 0xB0	; 176
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fe 01       	movw	r30, r28
 164:	09 95       	icall
	LCDCommand(0x04); //Set Temp coefficent
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fe 01       	movw	r30, r28
 16c:	09 95       	icall
	LCDCommand(0x14); //LCD bias mode 1:48: Try 0x13 or 0x14
 16e:	84 e1       	ldi	r24, 0x14	; 20
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fe 01       	movw	r30, r28
 174:	09 95       	icall

	LCDCommand(0x20); //We must send 0x20 before modifying the display control mode
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fe 01       	movw	r30, r28
 17c:	09 95       	icall
	LCDCommand(0x0C); //Set display control, normal mode. 0x0D for inverse
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fe 01       	movw	r30, r28
 184:	09 95       	icall
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <LCDCommand>:

//There are two memory banks in the LCD, data/RAM and commands. This
//function sets the DC pin high or low depending, and then sends
//the data byte
void LCDCommand(byte data) {
	clear_bit(PORTB,6);
 18c:	2e 98       	cbi	0x05, 6	; 5

	//Send the data
	clear_bit(PORTB, PIN_SCE);
 18e:	28 98       	cbi	0x05, 0	; 5
	/* Start transmission */
	SPDR = data;
 190:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 192:	0d b4       	in	r0, 0x2d	; 45
 194:	07 fe       	sbrs	r0, 7
 196:	fd cf       	rjmp	.-6      	; 0x192 <LCDCommand+0x6>
	;

	set_bit(PORTB, PIN_SCE);
 198:	28 9a       	sbi	0x05, 0	; 5
}
 19a:	08 95       	ret

0000019c <LCDData>:

void LCDData(byte data) {
	set_bit(PORTB,6);
 19c:	2e 9a       	sbi	0x05, 6	; 5

	//Send the data
	clear_bit(PORTB, PIN_SCE);
 19e:	28 98       	cbi	0x05, 0	; 5
	
	/* Start transmission */
	SPDR = data;
 1a0:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 1a2:	0d b4       	in	r0, 0x2d	; 45
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <LCDData+0x6>
	;

	set_bit(PORTB, PIN_SCE);
 1a8:	28 9a       	sbi	0x05, 0	; 5
 1aa:	08 95       	ret

000001ac <mapD>:
			//	break;
		}
	}
}

mapD(int x, int in_min, int in_max, int out_min, int out_max) {
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
	output = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 1b0:	fc 01       	movw	r30, r24
 1b2:	e6 1b       	sub	r30, r22
 1b4:	f7 0b       	sbc	r31, r23
 1b6:	02 1b       	sub	r16, r18
 1b8:	13 0b       	sbc	r17, r19
 1ba:	e0 9f       	mul	r30, r16
 1bc:	c0 01       	movw	r24, r0
 1be:	e1 9f       	mul	r30, r17
 1c0:	90 0d       	add	r25, r0
 1c2:	f0 9f       	mul	r31, r16
 1c4:	90 0d       	add	r25, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	fa 01       	movw	r30, r20
 1ca:	e6 1b       	sub	r30, r22
 1cc:	f7 0b       	sbc	r31, r23
 1ce:	bf 01       	movw	r22, r30
 1d0:	0e 94 c0 02 	call	0x580	; 0x580 <__divmodhi4>
 1d4:	26 0f       	add	r18, r22
 1d6:	37 1f       	adc	r19, r23
 1d8:	30 93 d1 06 	sts	0x06D1, r19
 1dc:	20 93 d0 06 	sts	0x06D0, r18
}
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <ADCInit>:

ADCInit(void) {
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 1e6:	ea e7       	ldi	r30, 0x7A	; 122
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0) | (REFS1); // Set ADC reference to AVCC
 1f0:	ac e7       	ldi	r26, 0x7C	; 124
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	8c 91       	ld	r24, X
 1f6:	87 64       	ori	r24, 0x47	; 71
 1f8:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 1fa:	8c 91       	ld	r24, X
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	8c 93       	st	X, r24

	// No MUX values needed to be changed to use ADC0

	ADCSRA |= (1 << ADEN);  // Enable ADC
 200:	80 81       	ld	r24, Z
 202:	80 68       	ori	r24, 0x80	; 128
 204:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 206:	80 81       	ld	r24, Z
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	80 83       	st	Z, r24
	//ADMUX &= 0xF8; // clear bottom 3 bits
	//ADMUX |= 4; // then set bottom 3 bits to channel n
	
	//ADCSRA |= (1 << ADATE);
	
}
 20c:	08 95       	ret

0000020e <main>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

int main(void)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	e0 97       	sbiw	r28, 0x30	; 48
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
	
	LCDInit(); //Init the LCD
 222:	0e 94 9b 00 	call	0x136	; 0x136 <LCDInit>
	ADCInit();
 226:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <ADCInit>
	ADCSRA |= (1 << ADATE);
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 62       	ori	r24, 0x20	; 32
 232:	80 83       	st	Z, r24
		itoa(output, str, 10);
		LCDString(str);
		*/
		//rando = (rand*109+89)%251; 
		
		timer ++;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
			
			timer = 0;
		}
		
		//ADCInit();
		ADMUX &= 0xF8; // clear bottom 3 bits
 238:	0c e7       	ldi	r16, 0x7C	; 124
 23a:	10 e0       	ldi	r17, 0x00	; 0
		ADMUX |= 4;
		ADCSRA |= (1 << ADATE);
 23c:	0f 2e       	mov	r0, r31
 23e:	fa e7       	ldi	r31, 0x7A	; 122
 240:	ef 2e       	mov	r14, r31
 242:	ff 24       	eor	r15, r15
 244:	f0 2d       	mov	r31, r0
		sensor1 = ADCH;
 246:	0f 2e       	mov	r0, r31
 248:	f9 e7       	ldi	r31, 0x79	; 121
 24a:	cf 2e       	mov	r12, r31
 24c:	dd 24       	eor	r13, r13
 24e:	f0 2d       	mov	r31, r0
		if (timer >= 1000) {		
			
			LCDClear();
			
			itoa(ADMUX, str, 2);
			LCDString(str);
 250:	0f 2e       	mov	r0, r31
 252:	f9 e9       	ldi	r31, 0x99	; 153
 254:	8f 2e       	mov	r8, r31
 256:	f2 e0       	ldi	r31, 0x02	; 2
 258:	9f 2e       	mov	r9, r31
 25a:	f0 2d       	mov	r31, r0
			
			gotoXY(0,1);
 25c:	0f 2e       	mov	r0, r31
 25e:	f8 e8       	ldi	r31, 0x88	; 136
 260:	6f 2e       	mov	r6, r31
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	7f 2e       	mov	r7, r31
 266:	f0 2d       	mov	r31, r0
 268:	38 c0       	rjmp	.+112    	; 0x2da <main+0xcc>
		
		//yax = 2*xax + 20;
		
		if (timer >= 1000) {		
			
			LCDClear();
 26a:	0e 94 75 00 	call	0xea	; 0xea <LCDClear>
			
			itoa(ADMUX, str, 2);
 26e:	f8 01       	movw	r30, r16
 270:	80 81       	ld	r24, Z
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	42 e0       	ldi	r20, 0x02	; 2
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <itoa>
			LCDString(str);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	f4 01       	movw	r30, r8
 288:	09 95       	icall
			
			gotoXY(0,1);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	f3 01       	movw	r30, r6
 294:	09 95       	icall
			itoa(sensor1, str1, 10);
 296:	8a 2d       	mov	r24, r10
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	be 01       	movw	r22, r28
 29c:	6f 5e       	subi	r22, 0xEF	; 239
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <itoa>
			LCDString(str1);
 2a8:	ce 01       	movw	r24, r28
 2aa:	41 96       	adiw	r24, 0x11	; 17
 2ac:	f4 01       	movw	r30, r8
 2ae:	09 95       	icall
			
			gotoXY(0,2);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	f3 01       	movw	r30, r6
 2ba:	09 95       	icall
			itoa(sensor2, str2, 10);
 2bc:	8b 2d       	mov	r24, r11
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5d       	subi	r22, 0xDF	; 223
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	4a e0       	ldi	r20, 0x0A	; 10
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	0e 94 e7 02 	call	0x5ce	; 0x5ce <itoa>
			LCDString(str2);
 2ce:	ce 01       	movw	r24, r28
 2d0:	81 96       	adiw	r24, 0x21	; 33
 2d2:	f4 01       	movw	r30, r8
 2d4:	09 95       	icall
			
			timer = 0;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		//ADCInit();
		ADMUX &= 0xF8; // clear bottom 3 bits
 2da:	f8 01       	movw	r30, r16
 2dc:	20 81       	ld	r18, Z
 2de:	28 7f       	andi	r18, 0xF8	; 248
 2e0:	20 83       	st	Z, r18
		ADMUX |= 4;
 2e2:	20 81       	ld	r18, Z
 2e4:	24 60       	ori	r18, 0x04	; 4
 2e6:	20 83       	st	Z, r18
		ADCSRA |= (1 << ADATE);
 2e8:	f7 01       	movw	r30, r14
 2ea:	20 81       	ld	r18, Z
 2ec:	20 62       	ori	r18, 0x20	; 32
 2ee:	20 83       	st	Z, r18
		sensor1 = ADCH;
 2f0:	f6 01       	movw	r30, r12
 2f2:	a0 80       	ld	r10, Z
		
		//ADCInit();
		ADMUX &= 0xF8; // clear bottom 3 bits
 2f4:	f8 01       	movw	r30, r16
 2f6:	20 81       	ld	r18, Z
 2f8:	28 7f       	andi	r18, 0xF8	; 248
 2fa:	20 83       	st	Z, r18
		ADMUX |= 5;
 2fc:	20 81       	ld	r18, Z
 2fe:	25 60       	ori	r18, 0x05	; 5
 300:	20 83       	st	Z, r18
		ADCSRA |= (1 << ADATE);
 302:	f7 01       	movw	r30, r14
 304:	20 81       	ld	r18, Z
 306:	20 62       	ori	r18, 0x20	; 32
 308:	20 83       	st	Z, r18
		sensor2 = ADCH;
 30a:	f6 01       	movw	r30, r12
 30c:	b0 80       	ld	r11, Z
		itoa(output, str, 10);
		LCDString(str);
		*/
		//rando = (rand*109+89)%251; 
		
		timer ++;
 30e:	01 96       	adiw	r24, 0x01	; 1
		
		//yax++;
		
		//yax = 2*xax + 20;
		
		if (timer >= 1000) {		
 310:	f3 e0       	ldi	r31, 0x03	; 3
 312:	88 3e       	cpi	r24, 0xE8	; 232
 314:	9f 07       	cpc	r25, r31
 316:	0c f3       	brlt	.-62     	; 0x2da <main+0xcc>
 318:	a8 cf       	rjmp	.-176    	; 0x26a <main+0x5c>

0000031a <writePixel>:
	
	//ADCSRA |= (1 << ADATE);
	
}

writePixel(int x, int y) {
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	7c 01       	movw	r14, r24
 328:	8b 01       	movw	r16, r22
	
	int q;
	int a = 0;
	
	if (y >= 0 && y <= 7) {
 32a:	68 30       	cpi	r22, 0x08	; 8
 32c:	71 05       	cpc	r23, r1
 32e:	28 f4       	brcc	.+10     	; 0x33a <writePixel+0x20>
		gotoXY(x,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 0;
 338:	e8 01       	movw	r28, r16
	}
	
	if (y > 7 && y <= 15) {
 33a:	c8 01       	movw	r24, r16
 33c:	08 97       	sbiw	r24, 0x08	; 8
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	91 05       	cpc	r25, r1
 342:	38 f4       	brcc	.+14     	; 0x352 <writePixel+0x38>
		gotoXY(x,1);
 344:	c7 01       	movw	r24, r14
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 8;
 34e:	e8 01       	movw	r28, r16
 350:	28 97       	sbiw	r28, 0x08	; 8
	}
	
	if (y > 15 && y <= 23) {
 352:	c8 01       	movw	r24, r16
 354:	40 97       	sbiw	r24, 0x10	; 16
 356:	88 30       	cpi	r24, 0x08	; 8
 358:	91 05       	cpc	r25, r1
 35a:	38 f4       	brcc	.+14     	; 0x36a <writePixel+0x50>
		gotoXY(x,2);
 35c:	c7 01       	movw	r24, r14
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 16;
 366:	e8 01       	movw	r28, r16
 368:	60 97       	sbiw	r28, 0x10	; 16
	}
	
	if (y > 23 && y <= 31) {
 36a:	c8 01       	movw	r24, r16
 36c:	48 97       	sbiw	r24, 0x18	; 24
 36e:	88 30       	cpi	r24, 0x08	; 8
 370:	91 05       	cpc	r25, r1
 372:	38 f4       	brcc	.+14     	; 0x382 <writePixel+0x68>
		gotoXY(x,3);
 374:	c7 01       	movw	r24, r14
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 24;
 37e:	e8 01       	movw	r28, r16
 380:	68 97       	sbiw	r28, 0x18	; 24
	}
	
	if (y > 31 && y <= 39) {
 382:	c8 01       	movw	r24, r16
 384:	80 97       	sbiw	r24, 0x20	; 32
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	91 05       	cpc	r25, r1
 38a:	38 f4       	brcc	.+14     	; 0x39a <writePixel+0x80>
		gotoXY(x,4);
 38c:	c7 01       	movw	r24, r14
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 32;
 396:	e8 01       	movw	r28, r16
 398:	a0 97       	sbiw	r28, 0x20	; 32
	}
	
	if (y > 39 && y <= 47) {
 39a:	c8 01       	movw	r24, r16
 39c:	88 97       	sbiw	r24, 0x28	; 40
 39e:	88 30       	cpi	r24, 0x08	; 8
 3a0:	91 05       	cpc	r25, r1
 3a2:	38 f4       	brcc	.+14     	; 0x3b2 <writePixel+0x98>
		gotoXY(x,5);
 3a4:	c7 01       	movw	r24, r14
 3a6:	65 e0       	ldi	r22, 0x05	; 5
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 88 00 	call	0x110	; 0x110 <gotoXY>
		q = y - 40;
 3ae:	e8 01       	movw	r28, r16
 3b0:	a8 97       	sbiw	r28, 0x28	; 40
	}
	
	
	if (q == 0)
 3b2:	20 97       	sbiw	r28, 0x00	; 0
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <writePixel+0xa6>
	LCDData(0b00000001);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 3be:	10 c0       	rjmp	.+32     	; 0x3e0 <writePixel+0xc6>
	
	if (q == 1)
 3c0:	c1 30       	cpi	r28, 0x01	; 1
 3c2:	d1 05       	cpc	r29, r1
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <writePixel+0xb6>
	LCDData(0b00000010);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 3ce:	10 c0       	rjmp	.+32     	; 0x3f0 <writePixel+0xd6>
	
	if (q == 2)
 3d0:	c2 30       	cpi	r28, 0x02	; 2
 3d2:	d1 05       	cpc	r29, r1
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <writePixel+0xc6>
	LCDData(0b00000100);
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 3de:	10 c0       	rjmp	.+32     	; 0x400 <writePixel+0xe6>
	
	if (q == 3)
 3e0:	c3 30       	cpi	r28, 0x03	; 3
 3e2:	d1 05       	cpc	r29, r1
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <writePixel+0xd6>
	LCDData(0b00001000);
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 3ee:	10 c0       	rjmp	.+32     	; 0x410 <writePixel+0xf6>
	
	if (q == 4)
 3f0:	c4 30       	cpi	r28, 0x04	; 4
 3f2:	d1 05       	cpc	r29, r1
 3f4:	29 f4       	brne	.+10     	; 0x400 <writePixel+0xe6>
	LCDData(0b00010000);
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 3fe:	10 c0       	rjmp	.+32     	; 0x420 <writePixel+0x106>
	
	if (q == 5)
 400:	c5 30       	cpi	r28, 0x05	; 5
 402:	d1 05       	cpc	r29, r1
 404:	29 f4       	brne	.+10     	; 0x410 <writePixel+0xf6>
	LCDData(0b00100000);
 406:	80 e2       	ldi	r24, 0x20	; 32
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 40e:	0f c0       	rjmp	.+30     	; 0x42e <writePixel+0x114>
	
	if (q == 6)
 410:	c6 30       	cpi	r28, 0x06	; 6
 412:	d1 05       	cpc	r29, r1
 414:	29 f4       	brne	.+10     	; 0x420 <writePixel+0x106>
	LCDData(0b01000000);
 416:	80 e4       	ldi	r24, 0x40	; 64
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
 41e:	07 c0       	rjmp	.+14     	; 0x42e <writePixel+0x114>
	
	if (q == 7)
 420:	c7 30       	cpi	r28, 0x07	; 7
 422:	d1 05       	cpc	r29, r1
 424:	21 f4       	brne	.+8      	; 0x42e <writePixel+0x114>
	LCDData(0b10000000);
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
	
	if (a == 1) {
		LCDData(0b11111111);
	}

}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	08 95       	ret

0000043c <drawTo>:
		
	}

}

drawTo(int x1, int y1, int x2, int y2) {
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	7c 01       	movw	r14, r24
 45a:	5b 01       	movw	r10, r22
 45c:	6a 01       	movw	r12, r20
	int dy;
	
	int yax = 0;
	int xax = 0;
	
	dx = x2 - x1;
 45e:	4a 01       	movw	r8, r20
 460:	88 1a       	sub	r8, r24
 462:	99 0a       	sbc	r9, r25
	dy = y2 - y1;
 464:	26 1b       	sub	r18, r22
 466:	37 0b       	sbc	r19, r23
	
	for (xax = x1; xax >= x1 && xax <= x2; xax++) {
 468:	48 17       	cp	r20, r24
 46a:	59 07       	cpc	r21, r25
 46c:	c4 f0       	brlt	.+48     	; 0x49e <drawTo+0x62>
		
	}

}

drawTo(int x1, int y1, int x2, int y2) {
 46e:	39 01       	movw	r6, r18
 470:	66 0c       	add	r6, r6
 472:	77 1c       	adc	r7, r7
 474:	89 01       	movw	r16, r18
	int xax = 0;
	
	dx = x2 - x1;
	dy = y2 - y1;
	
	for (xax = x1; xax >= x1 && xax <= x2; xax++) {
 476:	ec 01       	movw	r28, r24
		xax++;
		//yax = xax;
		yax = y1 + (dy) * (xax - x1)/(dx);
 478:	c8 01       	movw	r24, r16
 47a:	b4 01       	movw	r22, r8
 47c:	0e 94 c0 02 	call	0x580	; 0x580 <__divmodhi4>
 480:	6a 0d       	add	r22, r10
 482:	7b 1d       	adc	r23, r11
		
		writePixel(xax,yax);
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 8d 01 	call	0x31a	; 0x31a <writePixel>
	int xax = 0;
	
	dx = x2 - x1;
	dy = y2 - y1;
	
	for (xax = x1; xax >= x1 && xax <= x2; xax++) {
 48c:	22 96       	adiw	r28, 0x02	; 2
 48e:	ce 15       	cp	r28, r14
 490:	df 05       	cpc	r29, r15
 492:	2c f0       	brlt	.+10     	; 0x49e <drawTo+0x62>
 494:	06 0d       	add	r16, r6
 496:	17 1d       	adc	r17, r7
 498:	cc 16       	cp	r12, r28
 49a:	dd 06       	cpc	r13, r29
 49c:	6c f7       	brge	.-38     	; 0x478 <drawTo+0x3c>
		
		if (xax > x2) {
			//	break;
		}
	}
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	bf 90       	pop	r11
 4b0:	af 90       	pop	r10
 4b2:	9f 90       	pop	r9
 4b4:	8f 90       	pop	r8
 4b6:	7f 90       	pop	r7
 4b8:	6f 90       	pop	r6
 4ba:	08 95       	ret

000004bc <LCDCharacter>:
	if (a == 1) {
		LCDData(0b11111111);
	}

}
void LCDCharacter(char character) {
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	c8 2f       	mov	r28, r24
	LCDData(0x00); //Blank vertical line padding
 4ca:	0f 2e       	mov	r0, r31
 4cc:	fe ec       	ldi	r31, 0xCE	; 206
 4ce:	ef 2e       	mov	r14, r31
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	ff 2e       	mov	r15, r31
 4d4:	f0 2d       	mov	r31, r0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	f7 01       	movw	r30, r14
 4dc:	09 95       	icall
	
	for (int index = 0 ; index < 5 ; index++)
	LCDData(ASCII[character - 0x20][index]);
 4de:	2c 2f       	mov	r18, r28
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	c9 01       	movw	r24, r18
 4e4:	80 97       	sbiw	r24, 0x20	; 32
	if (a == 1) {
		LCDData(0b11111111);
	}

}
void LCDCharacter(char character) {
 4e6:	8c 01       	movw	r16, r24
 4e8:	00 0f       	add	r16, r16
 4ea:	11 1f       	adc	r17, r17
 4ec:	00 0f       	add	r16, r16
 4ee:	11 1f       	adc	r17, r17
 4f0:	08 0f       	add	r16, r24
 4f2:	19 1f       	adc	r17, r25
 4f4:	00 51       	subi	r16, 0x10	; 16
 4f6:	1b 4f       	sbci	r17, 0xFB	; 251
 4f8:	e9 01       	movw	r28, r18
 4fa:	cc 0f       	add	r28, r28
 4fc:	dd 1f       	adc	r29, r29
 4fe:	cc 0f       	add	r28, r28
 500:	dd 1f       	adc	r29, r29
 502:	c2 0f       	add	r28, r18
 504:	d3 1f       	adc	r29, r19
 506:	cb 5a       	subi	r28, 0xAB	; 171
 508:	db 4f       	sbci	r29, 0xFB	; 251
	LCDData(0x00); //Blank vertical line padding
	
	for (int index = 0 ; index < 5 ; index++)
	LCDData(ASCII[character - 0x20][index]);
 50a:	f8 01       	movw	r30, r16
 50c:	81 91       	ld	r24, Z+
 50e:	8f 01       	movw	r16, r30
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	f7 01       	movw	r30, r14
 514:	09 95       	icall

}
void LCDCharacter(char character) {
	LCDData(0x00); //Blank vertical line padding
	
	for (int index = 0 ; index < 5 ; index++)
 516:	0c 17       	cp	r16, r28
 518:	1d 07       	cpc	r17, r29
 51a:	b9 f7       	brne	.-18     	; 0x50a <LCDCharacter+0x4e>
	LCDData(ASCII[character - 0x20][index]);
	//0x20 is the ASCII character for Space (' '). The font table starts with this character

	LCDData(0x00); //Blank vertical line padding
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	f7 01       	movw	r30, r14
 522:	09 95       	icall
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <LCDString>:

//Given a string of characters, one by one is passed to the LCD
void LCDString(char *characters) {
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
	while (*characters)
 538:	88 81       	ld	r24, Y
 53a:	88 23       	and	r24, r24
 53c:	31 f0       	breq	.+12     	; 0x54a <LCDString+0x18>

	LCDData(0x00); //Blank vertical line padding
}

//Given a string of characters, one by one is passed to the LCD
void LCDString(char *characters) {
 53e:	21 96       	adiw	r28, 0x01	; 1
	while (*characters)
	LCDCharacter(*characters++);
 540:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCDCharacter>
	LCDData(0x00); //Blank vertical line padding
}

//Given a string of characters, one by one is passed to the LCD
void LCDString(char *characters) {
	while (*characters)
 544:	89 91       	ld	r24, Y+
 546:	88 23       	and	r24, r24
 548:	d9 f7       	brne	.-10     	; 0x540 <LCDString+0xe>
	LCDCharacter(*characters++);
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <LCDBitmap>:

//This takes a large array of bits and sends them to the LCD
void LCDBitmap(char my_array[]){
 550:	0f 93       	push	r16
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
	for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
 558:	08 2f       	mov	r16, r24
 55a:	19 2f       	mov	r17, r25
 55c:	c0 e0       	ldi	r28, 0x00	; 0
 55e:	d0 e0       	ldi	r29, 0x00	; 0
	LCDData(my_array[index]);
 560:	f8 01       	movw	r30, r16
 562:	81 91       	ld	r24, Z+
 564:	8f 01       	movw	r16, r30
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDData>
	LCDCharacter(*characters++);
}

//This takes a large array of bits and sends them to the LCD
void LCDBitmap(char my_array[]){
	for (int index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
 56c:	21 96       	adiw	r28, 0x01	; 1
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	c8 3f       	cpi	r28, 0xF8	; 248
 572:	df 07       	cpc	r29, r31
 574:	a9 f7       	brne	.-22     	; 0x560 <LCDBitmap+0x10>
	LCDData(my_array[index]);
}
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <__divmodhi4>:
 580:	97 fb       	bst	r25, 7
 582:	09 2e       	mov	r0, r25
 584:	07 26       	eor	r0, r23
 586:	0a d0       	rcall	.+20     	; 0x59c <__divmodhi4_neg1>
 588:	77 fd       	sbrc	r23, 7
 58a:	04 d0       	rcall	.+8      	; 0x594 <__divmodhi4_neg2>
 58c:	0c d0       	rcall	.+24     	; 0x5a6 <__udivmodhi4>
 58e:	06 d0       	rcall	.+12     	; 0x59c <__divmodhi4_neg1>
 590:	00 20       	and	r0, r0
 592:	1a f4       	brpl	.+6      	; 0x59a <__divmodhi4_exit>

00000594 <__divmodhi4_neg2>:
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255

0000059a <__divmodhi4_exit>:
 59a:	08 95       	ret

0000059c <__divmodhi4_neg1>:
 59c:	f6 f7       	brtc	.-4      	; 0x59a <__divmodhi4_exit>
 59e:	90 95       	com	r25
 5a0:	81 95       	neg	r24
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	08 95       	ret

000005a6 <__udivmodhi4>:
 5a6:	aa 1b       	sub	r26, r26
 5a8:	bb 1b       	sub	r27, r27
 5aa:	51 e1       	ldi	r21, 0x11	; 17
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <__udivmodhi4_ep>

000005ae <__udivmodhi4_loop>:
 5ae:	aa 1f       	adc	r26, r26
 5b0:	bb 1f       	adc	r27, r27
 5b2:	a6 17       	cp	r26, r22
 5b4:	b7 07       	cpc	r27, r23
 5b6:	10 f0       	brcs	.+4      	; 0x5bc <__udivmodhi4_ep>
 5b8:	a6 1b       	sub	r26, r22
 5ba:	b7 0b       	sbc	r27, r23

000005bc <__udivmodhi4_ep>:
 5bc:	88 1f       	adc	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	5a 95       	dec	r21
 5c2:	a9 f7       	brne	.-22     	; 0x5ae <__udivmodhi4_loop>
 5c4:	80 95       	com	r24
 5c6:	90 95       	com	r25
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	08 95       	ret

000005ce <itoa>:
 5ce:	fb 01       	movw	r30, r22
 5d0:	9f 01       	movw	r18, r30
 5d2:	e8 94       	clt
 5d4:	42 30       	cpi	r20, 0x02	; 2
 5d6:	c4 f0       	brlt	.+48     	; 0x608 <itoa+0x3a>
 5d8:	45 32       	cpi	r20, 0x25	; 37
 5da:	b4 f4       	brge	.+44     	; 0x608 <itoa+0x3a>
 5dc:	4a 30       	cpi	r20, 0x0A	; 10
 5de:	29 f4       	brne	.+10     	; 0x5ea <itoa+0x1c>
 5e0:	97 fb       	bst	r25, 7
 5e2:	1e f4       	brtc	.+6      	; 0x5ea <itoa+0x1c>
 5e4:	90 95       	com	r25
 5e6:	81 95       	neg	r24
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	64 2f       	mov	r22, r20
 5ec:	77 27       	eor	r23, r23
 5ee:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__udivmodhi4>
 5f2:	80 5d       	subi	r24, 0xD0	; 208
 5f4:	8a 33       	cpi	r24, 0x3A	; 58
 5f6:	0c f0       	brlt	.+2      	; 0x5fa <itoa+0x2c>
 5f8:	89 5d       	subi	r24, 0xD9	; 217
 5fa:	81 93       	st	Z+, r24
 5fc:	cb 01       	movw	r24, r22
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	a1 f7       	brne	.-24     	; 0x5ea <itoa+0x1c>
 602:	16 f4       	brtc	.+4      	; 0x608 <itoa+0x3a>
 604:	5d e2       	ldi	r21, 0x2D	; 45
 606:	51 93       	st	Z+, r21
 608:	10 82       	st	Z, r1
 60a:	c9 01       	movw	r24, r18
 60c:	0c 94 08 03 	jmp	0x610	; 0x610 <strrev>

00000610 <strrev>:
 610:	dc 01       	movw	r26, r24
 612:	fc 01       	movw	r30, r24
 614:	67 2f       	mov	r22, r23
 616:	71 91       	ld	r23, Z+
 618:	77 23       	and	r23, r23
 61a:	e1 f7       	brne	.-8      	; 0x614 <strrev+0x4>
 61c:	32 97       	sbiw	r30, 0x02	; 2
 61e:	04 c0       	rjmp	.+8      	; 0x628 <strrev+0x18>
 620:	7c 91       	ld	r23, X
 622:	6d 93       	st	X+, r22
 624:	70 83       	st	Z, r23
 626:	62 91       	ld	r22, -Z
 628:	ae 17       	cp	r26, r30
 62a:	bf 07       	cpc	r27, r31
 62c:	c8 f3       	brcs	.-14     	; 0x620 <strrev+0x10>
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
